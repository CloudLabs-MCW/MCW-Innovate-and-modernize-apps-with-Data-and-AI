{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "uniqueSuffix": {
        "type": "String",
        "metadata": {
          "description": "Suffix added to all resource name to make them unique."
        }
      },
      "sqlAdministratorLoginPassword": {
        "type": "String",
        "metadata": {
          "description": "Password for SQL Admin"
        }
      }
    },
    "variables": {
      "location": "[resourceGroup().location]",
      "sqlAdministratorLogin": "sqladminuser",
      "workspaceName": "[concat('asaworkspace', parameters('uniqueSuffix'))]",
      "adlsStorageAccountName": "[concat('modappadls', parameters('uniqueSuffix'))]",
      "defaultDataLakeStorageFilesystemName": "tempdata",
      "sqlComputeName": "modernapp",
      "sparkComputeName": "modernizeapp",
      "computeSubnetId": "",
      "sqlServerSKU": "DW100c",
      "storageBlobDataOwnerRoleID": "b7e6dc6d-f1e8-4753-8033-0f276bb0955b",
      "defaultDataLakeStorageAccountUrl": "[concat('https://', variables('adlsStorageAccountName'), '.dfs.core.windows.net')]",
      "sparkAutoScaleEnabled": "true",
      "sparkMinNodeCount": "3",
      "sparkMaxNodeCount": "4",
      "sparkNodeCount": "0",
      "sparkNodeSizeFamily": "MemoryOptimized",
      "sparkNodeSize": "Small",
      "sparkAutoPauseEnabled": "true",
      "sparkAutoPauseDelayInMinutes": "15",
      "sparkVersion": "2.4",
      "keyVaultName": "[concat('asakeyvault', parameters('uniqueSuffix'))]",
      "blobStorageAccountName": "[concat('asastore', parameters('uniqueSuffix'))]",
      "applicationInsightsName": "[concat('asaappinsights', parameters('uniqueSuffix'))]",
      "cosmosDbAccountName": "[concat('modernize-app-', parameters('uniqueSuffix'))]",
      "uniqueSuffix": "[toLower(parameters('uniqueSuffix'))]",
      "mlWorkspaceName": "[concat('modernize-app-', variables('uniqueSuffix'))]",
      "mlStorageName": "[concat('modappml', variables('uniqueSuffix'))]",
      "mlStorageAccountType": "Standard_LRS",
      "containerRegistryName": "[concat('modernizeapp', variables('uniqueSuffix'))]",
      "eventHubNameSpace": "[concat('modernize-app-',variables('uniqueSuffix'))]",
      "managedAccessPolicyName": "ManageAccessPolicy",
      "functionAppName": "[concat('modernize-app-', variables('uniqueSuffix'))]",
      "functionAppHostingPlanName": "[concat('ASP-modernize-app-', variables('uniqueSuffix'))]",
      "streamAnalyticsName": "[concat('modernize-app-stream', variables('uniqueSuffix'))]",
      "api": "2020-10-05-privatepreview",
      "firewallrules": {
        "batch": {
          "rules": [
            {
              "Name": "AllowAll",
              "StartIpAddress": "0.0.0.0",
              "EndIpAddress": "255.255.255.255"
            }
          ]
        }
      }
    },
    "resources": [
      {
        "type": "Microsoft.Storage/storageAccounts",
        "apiVersion": "2019-04-01",
        "name": "[variables('blobStorageAccountName')]",
        "location": "[variables('location')]",
        "sku": {
          "name": "Standard_LRS"
        },
        "kind": "StorageV2",
        "properties": {
          "encryption": {
            "services": {
              "blob": {
                "enabled": true
              },
              "file": {
                "enabled": true
              }
            },
            "keySource": "Microsoft.Storage"
          },
          "supportsHttpsTrafficOnly": true
        }
      },
      {
        "type": "Microsoft.Storage/storageAccounts/blobServices",
        "apiVersion": "2019-06-01",
        "name": "[concat(variables('blobStorageAccountName'), '/default')]",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts', variables('blobStorageAccountName'))]"
        ],
        "sku": {
          "name": "Standard_LRS",
          "tier": "Standard"
        },
        "properties": {
          "cors": {
            "corsRules": []
          },
          "deleteRetentionPolicy": {
            "enabled": false
          }
        }
      },
      {
        "type": "Microsoft.KeyVault/vaults",
        "apiVersion": "2018-02-14",
        "name": "[variables('keyVaultName')]",
        "location": "[variables('location')]",
        "properties": {
          "tenantId": "[subscription().tenantId]",
          "sku": {
            "name": "standard",
            "family": "A"
          },
          "accessPolicies": []
        }
      },
      {
        "type": "Microsoft.KeyVault/vaults/secrets",
        "name": "[concat(variables('keyVaultName'), '/SqlPassword')]",
        "apiVersion": "2018-02-14",
        "location": "[variables('location')]",
        "dependsOn": [
          "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
        ],
        "properties": {
          "value": "[parameters('sqlAdministratorLoginPassword')]"
        }
      },
      {
        "type": "Microsoft.Storage/storageAccounts",
        "apiVersion": "2019-06-01",
        "name": "[variables('adlsStorageAccountName')]",
        "location": "[variables('location')]",
        "dependsOn": [],
        "tags": {},
        "sku": {
          "name": "Standard_LRS"
        },
        "kind": "StorageV2",
        "properties": {
          "accessTier": "Hot",
          "supportsHttpsTrafficOnly": "true",
          "isHnsEnabled": "true",
          "largeFileSharesState": "Disabled"
        },
        "resources": [
          {
            "type": "blobServices/containers",
            "apiVersion": "2018-07-01",
            "name": "[concat('default/', variables('defaultDataLakeStorageFilesystemName'))]",
            "dependsOn": [
              "[concat('Microsoft.Storage/storageAccounts/', variables('adlsStorageAccountName'))]"
            ]
          }
        ]
      },
      {
        "type": "Microsoft.Storage/storageAccounts/blobServices",
        "apiVersion": "2019-06-01",
        "name": "[concat(variables('adlsStorageAccountName'), '/default')]",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts', variables('adlsStorageAccountName'))]"
        ],
        "sku": {
          "name": "Standard_LRS",
          "tier": "Standard"
        },
        "properties": {
          "cors": {
            "corsRules": []
          },
          "deleteRetentionPolicy": {
            "enabled": false
          }
        }
      },
      {
        "type": "Microsoft.Storage/storageAccounts/fileServices",
        "apiVersion": "2019-06-01",
        "name": "[concat(variables('adlsStorageAccountName'), '/default')]",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts', variables('adlsStorageAccountName'))]"
        ],
        "sku": {
          "name": "Standard_LRS",
          "tier": "Standard"
        },
        "properties": {
          "cors": {
            "corsRules": []
          }
        }
      },
      {
        "type": "Microsoft.Synapse/workspaces",
        "apiVersion": "2019-06-01-preview",
        "name": "[variables('workspaceName')]",
        "location": "[variables('location')]",
        "dependsOn": [
          "[concat('Microsoft.Storage/storageAccounts/', variables('adlsStorageAccountName'), '/blobServices/default/containers/', variables('defaultDataLakeStorageFilesystemName'))]"
        ],
        "identity": {
          "type": "SystemAssigned"
        },
        "properties": {
          "defaultDataLakeStorage": {
            "accountUrl": "[variables('defaultDataLakeStorageAccountUrl')]",
            "filesystem": "[variables('defaultDataLakeStorageFilesystemName')]"
          },
          "virtualNetworkProfile": {
            "computeSubnetId": "[variables('computeSubnetId')]"
          },
          "sqlAdministratorLogin": "[variables('sqlAdministratorLogin')]",
          "sqlAdministratorLoginPassword": "[parameters('sqlAdministratorLoginPassword')]"
        },
        "resources": [
          {
            "type": "firewallrules",
            "apiVersion": "2019-06-01-preview",
            "name": "allowAll",
            "location": "[variables('location')]",
            "dependsOn": [
              "[concat('Microsoft.Synapse/workspaces/', variables('workspaceName'))]"
            ],
            "properties": {
              "startIpAddress": "0.0.0.0",
              "endIpAddress": "255.255.255.255"
            }
          }
        ]
      },
      {
        "type": "Microsoft.Storage/storageAccounts/blobServices/containers/providers/roleAssignments",
        "apiVersion": "2018-09-01-preview",
        "name": "[concat(variables('adlsStorageAccountName'), '/default/', variables('defaultDataLakeStorageFilesystemName'), '/Microsoft.Authorization/',  guid(concat(resourceGroup().id, '/', variables('storageBlobDataOwnerRoleID'), '/', variables('workspaceName'))))]",
        "location": "[variables('location')]",
        "dependsOn": [
          "[concat('Microsoft.Synapse/workspaces/', variables('workspaceName'))]"
        ],
        "properties": {
          "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataOwnerRoleID'))]",
          "principalId": "[reference(concat('Microsoft.Synapse/workspaces/', variables('workspaceName')), '2019-06-01-preview', 'Full').identity.principalId]",
          "principalType": "ServicePrincipal"
        }
      },
      {
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2018-09-01-preview",
        "name": "[guid(concat(resourceGroup().id, '/', variables('storageBlobDataOwnerRoleID'), '/', variables('workspaceName'), '2'))]",
        "location": "[variables('location')]",
        "dependsOn": [
          "[concat('Microsoft.Synapse/workspaces/', variables('workspaceName'))]"
        ],
        "properties": {
          "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('storageBlobDataOwnerRoleID'))]",
          "principalId": "[reference(concat('Microsoft.Synapse/workspaces/', variables('workspaceName')), '2019-06-01-preview', 'Full').identity.principalId]",
          "principalType": "ServicePrincipal"
        }
      },
      {
        "type": "Microsoft.Synapse/workspaces/bigDataPools",
        "apiVersion": "2019-06-01-preview",
        "name": "[concat(variables('workspaceName'), '/', variables('sparkComputeName'))]",
        "location": "[variables('location')]",
        "dependsOn": [
          "[concat('Microsoft.Synapse/workspaces/', variables('workspaceName'))]"
        ],
        "properties": {
          "nodeCount": "[variables('sparkNodeCount')]",
          "nodeSizeFamily": "[variables('sparkNodeSizeFamily')]",
          "nodeSize": "[variables('sparkNodeSize')]",
          "autoScale": {
            "enabled": "[variables('sparkAutoScaleEnabled')]",
            "minNodeCount": "[variables('sparkMinNodeCount')]",
            "maxNodeCount": "[variables('sparkMaxNodeCount')]"
          },
          "autoPause": {
            "enabled": "[variables('sparkAutoPauseEnabled')]",
            "delayInMinutes": "[variables('sparkAutoPauseDelayInMinutes')]"
          },
          "sparkVersion": "[variables('sparkVersion')]"
        }
      },
      {
        "type": "Microsoft.Synapse/workspaces/sqlPools",
        "apiVersion": "2019-06-01-preview",
        "name": "[concat(variables('workspaceName'), '/', variables('sqlComputeName'))]",
        "location": "[variables('location')]",
        "dependsOn": [
          "[concat('Microsoft.Synapse/workspaces/', variables('workspaceName'))]",
          "[concat('Microsoft.Synapse/workspaces/', variables('workspaceName'), '/bigDataPools/', variables('sparkComputeName'))]"
        ],
        "sku": {
          "name": "[variables('sqlServerSKU')]"
        },
        "properties": {
          "createMode": "Default",
          "collation": "SQL_Latin1_General_CP1_CI_AS"
        }
      },
      {
        "type": "Microsoft.Insights/components",
        "apiVersion": "2018-05-01-preview",
        "name": "[variables('applicationInsightsName')]",
        "location": "[if(or(equals(variables('location'),'eastus2'),equals(variables('location'),'westcentralus')),'southcentralus',variables('location'))]",
        "kind": "web",
        "properties": {
          "Application_Type": "web"
        }
      },
      {
        "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
        "apiVersion": "2019-06-01",
        "name": "[concat(variables('adlsStorageAccountName'), '/default/synapse')]",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('adlsStorageAccountName'), 'default')]",
          "[resourceId('Microsoft.Storage/storageAccounts', variables('adlsStorageAccountName'))]"
        ],
        "properties": {
          "publicAccess": "None"
        }
      },
      {
        "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
        "apiVersion": "2019-06-01",
        "name": "[concat(variables('blobStorageAccountName'), '/default/staging')]",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('blobStorageAccountName'), 'default')]",
          "[resourceId('Microsoft.Storage/storageAccounts', variables('blobStorageAccountName'))]"
        ],
        "properties": {
          "publicAccess": "None"
        }
      },
      {
        "type": "Microsoft.DocumentDB/databaseAccounts",
        "apiVersion": "2020-03-01",
        "name": "[variables('cosmosDbAccountName')]",
        "location": "[variables('location')]",
        "dependsOn": [
          "[concat('Microsoft.Synapse/workspaces/', variables('workspaceName'), '/sqlPools/', variables('sqlComputeName'))]",
          "[concat('Microsoft.Synapse/workspaces/', variables('workspaceName'))]",
          "[concat('Microsoft.Storage/storageAccounts/', variables('adlsStorageAccountName'), '/blobServices/default/containers/', variables('defaultDataLakeStorageFilesystemName'))]"
        ],
        "tags": {
          "defaultExperience": "Core (SQL)",
          "hidden-cosmos-mmspecial": "",
          "CosmosAccountType": "Non-Production"
        },
        "kind": "GlobalDocumentDB",
        "properties": {
          "publicNetworkAccess": "Enabled",
          "enableAutomaticFailover": false,
          "enableMultipleWriteLocations": false,
          "isVirtualNetworkFilterEnabled": false,
          "virtualNetworkRules": [],
          "disableKeyBasedMetadataWriteAccess": false,
          "databaseAccountOfferType": "Standard",
          "consistencyPolicy": {
            "defaultConsistencyLevel": "Session",
            "maxIntervalInSeconds": 5,
            "maxStalenessPrefix": 100
          },
          "locations": [
            {
              "locationName": "[variables('location')]",
              "provisioningState": "Succeeded",
              "failoverPriority": 0,
              "isZoneRedundant": false
            }
          ],
          "capabilities": []
        }
      },
      {
        "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
        "apiVersion": "2020-03-01",
        "name": "[concat(variables('cosmosDbAccountName'), '/CustomerProfile')]",
        "dependsOn": [
          "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDbAccountName'))]"
        ],
        "properties": {
          "resource": {
            "id": "CustomerProfile"
          },
          "options": {}
        }
      },
      {
        "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
        "apiVersion": "2020-03-01",
        "name": "[concat(variables('cosmosDbAccountName'), '/CustomerProfile/OnlineUserProfile01')]",
        "dependsOn": [
          "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosDbAccountName'), 'CustomerProfile')]",
          "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDbAccountName'))]"
        ],
        "properties": {
          "resource": {
            "id": "OnlineUserProfile01",
            "indexingPolicy": {
              "indexingMode": "consistent",
              "automatic": true,
              "includedPaths": [
                {
                  "path": "/*"
                }
              ],
              "excludedPaths": [
                {
                  "path": "/\"_etag\"/?"
                }
              ]
            },
            "partitionKey": {
              "paths": [
                "/userId"
              ],
              "kind": "Hash"
            },
            "uniqueKeyPolicy": {
              "uniqueKeys": []
            },
            "conflictResolutionPolicy": {
              "mode": "LastWriterWins",
              "conflictResolutionPath": "/_ts"
            }
          },
          "options": {}
        }
      },
      {
        "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/throughputSettings",
        "apiVersion": "2020-03-01",
        "name": "[concat(variables('cosmosDbAccountName'), '/CustomerProfile/OnlineUserProfile01/default')]",
        "dependsOn": [
          "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', variables('cosmosDbAccountName'), 'CustomerProfile', 'OnlineUserProfile01')]",
          "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosDbAccountName'), 'CustomerProfile')]",
          "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDbAccountName'))]"
        ],
        "properties": {
          "resource": {
            "throughput": 10000
          }
        }
      },
        {
            "apiVersion": "2018-11-01",
            "name": "[variables('functionAppName')]",
            "type": "Microsoft.Web/sites",
            "kind": "functionapp",
            "location": "[variables('location')]",
            "tags": null,
            "dependsOn": [
                "[concat('Microsoft.Web/serverfarms/', variables('functionAppHostingPlanName'))]",
                "[concat('Microsoft.Storage/storageAccounts/', variables('adlsStorageAccountName'))]"
            ],
            "properties": {
                "name": "[variables('functionAppName')]",
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "FUNCTIONS_EXTENSION_VERSION",
                            "value": "~3"
                        },
                        {
                            "name": "FUNCTIONS_WORKER_RUNTIME",
                            "value": "dotnet"
                        },
                        {
                            "name": "AzureWebJobsStorage",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('adlsStorageAccountName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('adlsStorageAccountName')), '2019-06-01').keys[0].value,';EndpointSuffix=','core.windows.net')]"
                        },
                        {
                            "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('adlsStorageAccountName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('adlsStorageAccountName')), '2019-06-01').keys[0].value,';EndpointSuffix=','core.windows.net')]"
                        },
                        {
                            "name": "WEBSITE_CONTENTSHARE",
                            "value": "[concat(toLower(variables('functionAppName')), 'aeeb')]"
                        }
                    ],
                    "use32BitWorkerProcess": true
                },
                "serverFarmId": "[concat('/subscriptions/', subscription().id, '/resourcegroups/', resourceGroup().name, '/providers/Microsoft.Web/serverfarms/', variables('functionAppHostingPlanName'))]",
                "clientAffinityEnabled": false
            }
        },
        {
            "apiVersion": "2018-11-01",
            "name": "[variables('functionAppHostingPlanName')]",
            "type": "Microsoft.Web/serverfarms",
            "location": "[variables('location')]",
            "kind": "",
            "tags": null,
            "dependsOn": [],
            "properties": {
                "name": "[variables('functionAppHostingPlanName')]",
                "workerSize": "0",
                "workerSizeId": "0",
                "numberOfWorkers": "1"
            },
            "sku": {
                "Tier": "Dynamic",
                "Name": "Y1"
            }
        },
        {
            "type":"Microsoft.EventHub/namespaces",
            "apiVersion":"2018-01-01-preview",
            "name":"[variables('eventHubNameSpace')]",
            "location": "[variables('location')]",
            "sku":{
              "name":"Standard",
              "tier":"Standard",
              "capacity":1
            },
            "properties":{
              "zoneRedundant":false,
              "isAutoInflateEnabled":false,
              "maximumThroughputUnits":0,
              "kafkaEnabled":true
            }
        },
        {
          "type":"Microsoft.EventHub/namespaces/AuthorizationRules",
          "apiVersion":"2017-04-01",
          "name":"[concat(variables('eventHubNameSpace'), '/',variables('managedAccessPolicyName'))]",
          "location": "[variables('location')]",
          "dependsOn":[
            "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNameSpace'))]"
          ],
          "properties":{
            "rights":[
                "Manage",
                "Listen",
                "Send"
            ]
          }
      },
      {
          "type":"Microsoft.EventHub/namespaces/AuthorizationRules",
          "apiVersion":"2017-04-01",
          "name":"[concat(variables('eventHubNameSpace'), '/RootManageSharedAccessKey')]",
          "location": "[variables('location')]",
          "dependsOn":[
            "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNameSpace'))]"
          ],
          "properties":{
            "rights":[
                "Listen",
                "Manage",
                "Send"
            ]
          }
      },
      {
          "type":"Microsoft.EventHub/namespaces/networkRuleSets",
          "apiVersion":"2018-01-01-preview",
          "name":"[concat(variables('eventHubNamespace'), '/default')]",
          "location": "[variables('location')]",
          "dependsOn":[
            "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubNamespace'))]"
          ],
          "properties":{
            "defaultAction":"Deny",
            "virtualNetworkRules":[

            ],
            "ipRules":[

            ]
          }
      },
      {
        "type":"Microsoft.StreamAnalytics/streamingjobs",
        "apiVersion":"2019-06-01",
        "name":"[variables('streamAnalyticsName')]",
        "location": "[variables('location')]",
        "identity": {
          "type": "SystemAssigned"
        },
        "properties":{
          "sku":{
              "name":"Standard"
          },	
          "eventsOutOfOrderPolicy":"Adjust",
          "outputErrorPolicy":"Stop",
          "eventsOutOfOrderMaxDelayInSeconds":0,
          "eventsLateArrivalMaxDelayInSeconds":5,
          "dataLocale":"en-US",
          "transformation": {
            "name": "Transformation",
            "properties": {
              "streamingUnits": 3,
              "query": "SELECT\r\n    *\r\nINTO\r\n    [YourOutputAlias]\r\nFROM\r\n    [YourInputAlias]"
            }
          }
        }
      },
      {
          "type": "Microsoft.Storage/storageAccounts",
          "apiVersion": "2019-04-01",
          "name": "[variables('mlStorageName')]",
          "location": "[variables('location')]",
          "sku": {
              "name": "[variables('mlStorageAccountType')]"
          },
          "kind": "StorageV2",
          "properties": {
              "encryption": {
                  "services": {
                      "blob": {
                          "enabled": true
                      },
                      "file": {
                          "enabled": true
                      }
                  },
                  "keySource": "Microsoft.Storage"
              },
              "supportsHttpsTrafficOnly": true
          }
      },
      {
          "type": "Microsoft.ContainerRegistry/registries",
          "apiVersion": "2019-12-01-preview",
          "name": "[variables('containerRegistryName')]",
          "location": "[variables('location')]",
          "comments": "Container registry for Azure Machine Learning docker images",
          "tags": {
            "displayName": "Container Registry",
            "container.registry": "[variables('containerRegistryName')]"
          },
          "sku": {
            "name": "Standard",
            "tier": "Standard"
          }
      },
      {
          "type": "Microsoft.MachineLearningServices/workspaces",
          "apiVersion": "2020-03-01",
          "name": "[variables('mlWorkspaceName')]",
          "location": "[variables('location')]",
          "dependsOn": [
              "[resourceId('Microsoft.Storage/storageAccounts', variables('mlStorageName'))]",
              "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]",
              "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryName'))]"
          ],
          "identity": {
              "type": "systemAssigned"
          },
          "sku": {
              "tier": "Basic",
              "name": "Basic"
          },
          "properties": {
              "friendlyName": "[variables('mlWorkspaceName')]",
              "storageAccount": "[resourceId('Microsoft.Storage/storageAccounts', variables('mlStorageName'))]",
              "keyVault": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
              "applicationInsights": "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]",
              "containerRegistry": "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryName'))]"
          }
      }
    ],
    "outputs": {}
  }
  